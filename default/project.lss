
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000632  000006c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000632  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800106  00800106  000006cc  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000162  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000724  00000000  00000000  000008ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f1  00000000  00000000  00000ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000630  00000000  00000000  000012e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  00001914  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001fe  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000270  00000000  00000000  00001c92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_1>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_4>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e2 e3       	ldi	r30, 0x32	; 50
  ac:	f6 e0       	ldi	r31, 0x06	; 6
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a6 30       	cpi	r26, 0x06	; 6
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	a6 e0       	ldi	r26, 0x06	; 6
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	ab 30       	cpi	r26, 0x0B	; 11
  ca:	b1 07       	cpc	r27, r17
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	0e 94 95 00 	call	0x12a	; 0x12a <main>
  d2:	0c 94 17 03 	jmp	0x62e	; 0x62e <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_default>

000000da <__vector_1>:
	return(0);

}

/* Set up the External Interrupt 0 Vector */
ISR(INT0_vect){
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
	/* Toggle PORTA bit 0 */
	STATE = 2;
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	80 93 06 01 	sts	0x0106, r24
}
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <__vector_4>:

ISR(INT3_vect){
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	8f 93       	push	r24
	/* Toggle PORTA bit 3 */
	STATE = 4;
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	80 93 06 01 	sts	0x0106, r24
}
 10a:	8f 91       	pop	r24
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <__vector_default>:
// which usually indicates a bug), then the default action is to reset the device by jumping 
// to the reset vector. You can override this by supplying a function named BADISR_vect which 
// should be defined with ISR() as such. (The name BADISR_vect is actually an alias for __vector_default.
// The latter must be used inside assembly code in case <avr/interrupt.h> is not included.
ISR(BADISR_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
    // user code here
}
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <main>:
#include "motors.h"


int main(){

	STATE = 0;
 12a:	10 92 06 01 	sts	0x0106, r1

	cli();	// Disables all interrupts
 12e:	f8 94       	cli

	DDRA = 0xff; //Set PORTA to output for stepper motor
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xff; //Set PORTB to output for DC motor
 134:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xff; //Set PORTC to output for LEDs
 136:	87 b9       	out	0x07, r24	; 7
	//DDRD = 0x00; //Set PORTD to input for 4 sensors and 2 push buttons (default)

	initPWM();
 138:	0e 94 db 01 	call	0x3b6	; 0x3b6 <initPWM>
	while(1) {
		startDCMotor();
 13c:	0e 94 0d 02 	call	0x41a	; 0x41a <startDCMotor>
 140:	fd cf       	rjmp	.-6      	; 0x13c <main+0x12>

00000142 <setup>:
/**************************************************************************************
* DESC: initializes the linked queue to 'NULL' status
* INPUT: the head and tail pointers by reference
*/

void setup(link **h,link **t){
 142:	fc 01       	movw	r30, r24
 144:	db 01       	movw	r26, r22
	*h = NULL;		/* Point the head to NOTHING (NULL) */
 146:	11 82       	std	Z+1, r1	; 0x01
 148:	10 82       	st	Z, r1
	*t = NULL;		/* Point the tail to NOTHING (NULL) */
 14a:	1d 92       	st	X+, r1
 14c:	1c 92       	st	X, r1
	return;
}/*setup*/
 14e:	08 95       	ret

00000150 <enqueue>:
*  DESC: Accepts as input a new link by reference, and assigns the head and tail		
*  of the queue accordingly				
*  INPUT: the head and tail pointers, and a pointer to the new link that was created 
*/
/* will put an item at the tail of the queue */
void enqueue(link **h, link **t, link **nL){
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	9c 01       	movw	r18, r24
 156:	db 01       	movw	r26, r22
 158:	fa 01       	movw	r30, r20

	if (*t != NULL){
 15a:	cd 91       	ld	r28, X+
 15c:	dc 91       	ld	r29, X
 15e:	11 97       	sbiw	r26, 0x01	; 1
 160:	80 81       	ld	r24, Z
 162:	91 81       	ldd	r25, Z+1	; 0x01
 164:	20 97       	sbiw	r28, 0x00	; 0
 166:	19 f0       	breq	.+6      	; 0x16e <enqueue+0x1e>
		/* Not an empty queue */
		(*t)->next = *nL;
 168:	9b 83       	std	Y+3, r25	; 0x03
 16a:	8a 83       	std	Y+2, r24	; 0x02
 16c:	03 c0       	rjmp	.+6      	; 0x174 <enqueue+0x24>
	}/*if*/
	else{
		/* It's an empty Queue */
		//(*h)->next = *nL;
		//should be this
		*h = *nL;
 16e:	e9 01       	movw	r28, r18
 170:	99 83       	std	Y+1, r25	; 0x01
 172:	88 83       	st	Y, r24
		*t = *nL;
 174:	80 81       	ld	r24, Z
 176:	91 81       	ldd	r25, Z+1	; 0x01
 178:	8d 93       	st	X+, r24
 17a:	9c 93       	st	X, r25
	}/* else */
	return;
}/*enqueue*/
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <dequeue>:
* DESC : Removes the link from the head of the list and assigns it to deQueuedLink
* INPUT: The head and tail pointers, and a ptr 'deQueuedLink' 
* 		 which the removed link will be assigned to
*/
/* This will remove the link and element within the link from the head of the queue */
void dequeue(link **h, link **deQueuedLink){
 182:	dc 01       	movw	r26, r24
 184:	fb 01       	movw	r30, r22
	/* ENTER YOUR CODE HERE */
	*deQueuedLink = *h;	// Will set to NULL if Head points to NULL
 186:	8d 91       	ld	r24, X+
 188:	9c 91       	ld	r25, X
 18a:	11 97       	sbiw	r26, 0x01	; 1
 18c:	91 83       	std	Z+1, r25	; 0x01
 18e:	80 83       	st	Z, r24
	/* Ensure it is not an empty queue */
	if (*h != NULL){
 190:	ed 91       	ld	r30, X+
 192:	fc 91       	ld	r31, X
 194:	11 97       	sbiw	r26, 0x01	; 1
 196:	30 97       	sbiw	r30, 0x00	; 0
 198:	21 f0       	breq	.+8      	; 0x1a2 <dequeue+0x20>
		*h = (*h)->next;
 19a:	82 81       	ldd	r24, Z+2	; 0x02
 19c:	93 81       	ldd	r25, Z+3	; 0x03
 19e:	8d 93       	st	X+, r24
 1a0:	9c 93       	st	X, r25
 1a2:	08 95       	ret

000001a4 <firstValue>:
* DESC: Peeks at the first element in the list
* INPUT: The head pointer
* RETURNS: The element contained within the queue
*/
/* This simply allows you to peek at the head element of the queue and returns a NULL pointer if empty */
element firstValue(link **h){
 1a4:	fc 01       	movw	r30, r24
	return((*h)->e);
 1a6:	01 90       	ld	r0, Z+
 1a8:	f0 81       	ld	r31, Z
 1aa:	e0 2d       	mov	r30, r0
}/*firstValue*/
 1ac:	80 81       	ld	r24, Z
 1ae:	91 81       	ldd	r25, Z+1	; 0x01
 1b0:	08 95       	ret

000001b2 <isEmpty>:
* DESC: Checks to see whether the queue is empty or not
* INPUT: The head pointer
* RETURNS: 1:if the queue is empty, and 0:if the queue is NOT empty
*/
/* Check to see if the queue is empty */
char isEmpty(link **h){
 1b2:	fc 01       	movw	r30, r24
 1b4:	20 e0       	ldi	r18, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	91 81       	ldd	r25, Z+1	; 0x01
 1ba:	89 2b       	or	r24, r25
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <isEmpty+0xe>
 1be:	21 e0       	ldi	r18, 0x01	; 1
	/* ENTER YOUR CODE HERE */
	return(*h == NULL);
}/*isEmpty*/
 1c0:	82 2f       	mov	r24, r18
 1c2:	08 95       	ret

000001c4 <size>:
* DESC: Obtains the number of links in the queue
* INPUT: The head and tail pointer
* RETURNS: An integer with the number of links in the queue
*/
/* returns the size of the queue*/
int size(link **h, link **t){
 1c4:	fc 01       	movw	r30, r24
	link 	*temp;			/* will store the link while traversing the queue */
	int 	numElements;

	numElements = 0;

	temp = *h;			/* point to the first item in the list */
 1c6:	01 90       	ld	r0, Z+
 1c8:	f0 81       	ld	r31, Z
 1ca:	e0 2d       	mov	r30, r0
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	05 c0       	rjmp	.+10     	; 0x1dc <size+0x18>

	while(temp != NULL){
		numElements++;
 1d2:	2f 5f       	subi	r18, 0xFF	; 255
 1d4:	3f 4f       	sbci	r19, 0xFF	; 255
		temp = temp->next;
 1d6:	02 80       	ldd	r0, Z+2	; 0x02
 1d8:	f3 81       	ldd	r31, Z+3	; 0x03
 1da:	e0 2d       	mov	r30, r0

	numElements = 0;

	temp = *h;			/* point to the first item in the list */

	while(temp != NULL){
 1dc:	30 97       	sbiw	r30, 0x00	; 0
 1de:	c9 f7       	brne	.-14     	; 0x1d2 <size+0xe>
		numElements++;
		temp = temp->next;
	}/*while*/
	
	return(numElements);
}/*size*/
 1e0:	c9 01       	movw	r24, r18
 1e2:	08 95       	ret

000001e4 <clearQueue>:
/**************************************************************************************
* DESC: deallocates (frees) all the memory consumed by the Queue
* INPUT: the pointers to the head and the tail
*/
/* This clears the queue */
void clearQueue(link **h, link **t){
 1e4:	0f 93       	push	r16
 1e6:	1f 93       	push	r17
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	ec 01       	movw	r28, r24
 1ee:	8b 01       	movw	r16, r22
 1f0:	07 c0       	rjmp	.+14     	; 0x200 <clearQueue+0x1c>

	link *temp;

	while (*h != NULL){
		temp = *h;
		*h=(*h)->next;
 1f2:	82 81       	ldd	r24, Z+2	; 0x02
 1f4:	93 81       	ldd	r25, Z+3	; 0x03
 1f6:	99 83       	std	Y+1, r25	; 0x01
 1f8:	88 83       	st	Y, r24
		free(temp);
 1fa:	cf 01       	movw	r24, r30
 1fc:	0e 94 bf 02 	call	0x57e	; 0x57e <free>
/* This clears the queue */
void clearQueue(link **h, link **t){

	link *temp;

	while (*h != NULL){
 200:	e8 81       	ld	r30, Y
 202:	f9 81       	ldd	r31, Y+1	; 0x01
 204:	30 97       	sbiw	r30, 0x00	; 0
 206:	a9 f7       	brne	.-22     	; 0x1f2 <clearQueue+0xe>
		*h=(*h)->next;
		free(temp);
	}/*while*/
	
	/* Last but not least set the tail to NULL */
	*t = NULL;		
 208:	f8 01       	movw	r30, r16
 20a:	11 82       	std	Z+1, r1	; 0x01
 20c:	10 82       	st	Z, r1

	return;
}/*clearQueue*/
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	08 95       	ret

00000218 <initLink>:

/**************************************************************************************
* DESC: This initializes a link and returns the pointer to the new link or NULL if error 
* INPUT: the head and tail pointers by reference
*/
void initLink(link **newLink){
 218:	0f 93       	push	r16
 21a:	1f 93       	push	r17
 21c:	8c 01       	movw	r16, r24
	//link *l;
	*newLink = malloc(sizeof(link));
 21e:	84 e0       	ldi	r24, 0x04	; 4
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 12 02 	call	0x424	; 0x424 <malloc>
 226:	fc 01       	movw	r30, r24
 228:	d8 01       	movw	r26, r16
 22a:	8d 93       	st	X+, r24
 22c:	9c 93       	st	X, r25
	(*newLink)->next = NULL;
 22e:	13 82       	std	Z+3, r1	; 0x03
 230:	12 82       	std	Z+2, r1	; 0x02
	return;
}/*initLink*/
 232:	1f 91       	pop	r17
 234:	0f 91       	pop	r16
 236:	08 95       	ret

00000238 <test>:
							/* Make sure you read it!!! */
/* global variables */
/* Avoid using these */

/* test routine */
int test(){	
 238:	df 93       	push	r29
 23a:	cf 93       	push	r28
 23c:	00 d0       	rcall	.+0      	; 0x23e <test+0x6>
 23e:	00 d0       	rcall	.+0      	; 0x240 <test+0x8>
 240:	00 d0       	rcall	.+0      	; 0x242 <test+0xa>
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
	link *tail;			/* The ptr to the tail of the queue */
	link *newLink;		/* A ptr to a link aggregate data type (struct) */
	link *rtnLink;		/* same as the above */
	element eTest;		/* A variable to hold the aggregate data type known as element */

	DDRB = 0xFF; 		/* Used for debugging purposes only */
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	84 b9       	out	0x04, r24	; 4

	rtnLink = NULL;
	newLink = NULL;
 24a:	1e 82       	std	Y+6, r1	; 0x06
 24c:	1d 82       	std	Y+5, r1	; 0x05
* DESC: initializes the linked queue to 'NULL' status
* INPUT: the head and tail pointers by reference
*/

void setup(link **h,link **t){
	*h = NULL;		/* Point the head to NOTHING (NULL) */
 24e:	1a 82       	std	Y+2, r1	; 0x02
 250:	19 82       	std	Y+1, r1	; 0x01
	*t = NULL;		/* Point the tail to NOTHING (NULL) */
 252:	1c 82       	std	Y+4, r1	; 0x04
 254:	1b 82       	std	Y+3, r1	; 0x03
		need the MCU attached to the computer to test this, and can do most of the work using the 
		debugger in the AVR studio while observing the I/O View in the top right corner. Click the tab
		or PORTB to see how the output chages while 'stepping' through the routines.
	*/
	/* Initialize a new link here */
	initLink(&newLink);
 256:	ce 01       	movw	r24, r28
 258:	05 96       	adiw	r24, 0x05	; 5
 25a:	0e 94 0c 01 	call	0x218	; 0x218 <initLink>
	newLink->e.itemCode = 3;
 25e:	ed 81       	ldd	r30, Y+5	; 0x05
 260:	fe 81       	ldd	r31, Y+6	; 0x06
 262:	83 e0       	ldi	r24, 0x03	; 3
 264:	80 83       	st	Z, r24
	newLink->e.stage = 4;
 266:	84 e0       	ldi	r24, 0x04	; 4
 268:	81 83       	std	Z+1, r24	; 0x01
*  INPUT: the head and tail pointers, and a pointer to the new link that was created 
*/
/* will put an item at the tail of the queue */
void enqueue(link **h, link **t, link **nL){

	if (*t != NULL){
 26a:	ab 81       	ldd	r26, Y+3	; 0x03
 26c:	bc 81       	ldd	r27, Y+4	; 0x04
 26e:	10 97       	sbiw	r26, 0x00	; 0
 270:	29 f0       	breq	.+10     	; 0x27c <test+0x44>
		/* Not an empty queue */
		(*t)->next = *nL;
 272:	13 96       	adiw	r26, 0x03	; 3
 274:	fc 93       	st	X, r31
 276:	ee 93       	st	-X, r30
 278:	12 97       	sbiw	r26, 0x02	; 2
 27a:	02 c0       	rjmp	.+4      	; 0x280 <test+0x48>
	}/*if*/
	else{
		/* It's an empty Queue */
		//(*h)->next = *nL;
		//should be this
		*h = *nL;
 27c:	fa 83       	std	Y+2, r31	; 0x02
 27e:	e9 83       	std	Y+1, r30	; 0x01
		*t = *nL;
 280:	fc 83       	std	Y+4, r31	; 0x04
 282:	eb 83       	std	Y+3, r30	; 0x03
	/* Initialize a new link here */
	initLink(&newLink);
	newLink->e.itemCode = 3;
	newLink->e.stage = 4;
	enqueue(&head, &tail, &newLink);
	PORTB = head->e.itemCode;
 284:	e9 81       	ldd	r30, Y+1	; 0x01
 286:	fa 81       	ldd	r31, Y+2	; 0x02
 288:	80 81       	ld	r24, Z
 28a:	85 b9       	out	0x05, r24	; 5
	PORTB = tail->e.stage;
 28c:	eb 81       	ldd	r30, Y+3	; 0x03
 28e:	fc 81       	ldd	r31, Y+4	; 0x04
 290:	81 81       	ldd	r24, Z+1	; 0x01
 292:	85 b9       	out	0x05, r24	; 5

	initLink(&newLink);
 294:	ce 01       	movw	r24, r28
 296:	05 96       	adiw	r24, 0x05	; 5
 298:	0e 94 0c 01 	call	0x218	; 0x218 <initLink>
	newLink->e.itemCode = 5;
 29c:	ed 81       	ldd	r30, Y+5	; 0x05
 29e:	fe 81       	ldd	r31, Y+6	; 0x06
 2a0:	85 e0       	ldi	r24, 0x05	; 5
 2a2:	80 83       	st	Z, r24
	newLink->e.stage = 6;
 2a4:	86 e0       	ldi	r24, 0x06	; 6
 2a6:	81 83       	std	Z+1, r24	; 0x01
*  INPUT: the head and tail pointers, and a pointer to the new link that was created 
*/
/* will put an item at the tail of the queue */
void enqueue(link **h, link **t, link **nL){

	if (*t != NULL){
 2a8:	ab 81       	ldd	r26, Y+3	; 0x03
 2aa:	bc 81       	ldd	r27, Y+4	; 0x04
 2ac:	10 97       	sbiw	r26, 0x00	; 0
 2ae:	29 f0       	breq	.+10     	; 0x2ba <test+0x82>
		/* Not an empty queue */
		(*t)->next = *nL;
 2b0:	13 96       	adiw	r26, 0x03	; 3
 2b2:	fc 93       	st	X, r31
 2b4:	ee 93       	st	-X, r30
 2b6:	12 97       	sbiw	r26, 0x02	; 2
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <test+0x86>
	}/*if*/
	else{
		/* It's an empty Queue */
		//(*h)->next = *nL;
		//should be this
		*h = *nL;
 2ba:	fa 83       	std	Y+2, r31	; 0x02
 2bc:	e9 83       	std	Y+1, r30	; 0x01
		*t = *nL;
 2be:	fc 83       	std	Y+4, r31	; 0x04
 2c0:	eb 83       	std	Y+3, r30	; 0x03

	initLink(&newLink);
	newLink->e.itemCode = 5;
	newLink->e.stage = 6;
	enqueue(&head, &tail, &newLink);
	PORTB = head->e.itemCode;
 2c2:	e9 81       	ldd	r30, Y+1	; 0x01
 2c4:	fa 81       	ldd	r31, Y+2	; 0x02
 2c6:	80 81       	ld	r24, Z
 2c8:	85 b9       	out	0x05, r24	; 5
	PORTB = tail->e.stage;
 2ca:	eb 81       	ldd	r30, Y+3	; 0x03
 2cc:	fc 81       	ldd	r31, Y+4	; 0x04
 2ce:	81 81       	ldd	r24, Z+1	; 0x01
 2d0:	85 b9       	out	0x05, r24	; 5

	initLink(&newLink);
 2d2:	ce 01       	movw	r24, r28
 2d4:	05 96       	adiw	r24, 0x05	; 5
 2d6:	0e 94 0c 01 	call	0x218	; 0x218 <initLink>
	newLink->e.itemCode = 7;
 2da:	ed 81       	ldd	r30, Y+5	; 0x05
 2dc:	fe 81       	ldd	r31, Y+6	; 0x06
 2de:	87 e0       	ldi	r24, 0x07	; 7
 2e0:	80 83       	st	Z, r24
	newLink->e.stage = 8;
 2e2:	88 e0       	ldi	r24, 0x08	; 8
 2e4:	81 83       	std	Z+1, r24	; 0x01
*  INPUT: the head and tail pointers, and a pointer to the new link that was created 
*/
/* will put an item at the tail of the queue */
void enqueue(link **h, link **t, link **nL){

	if (*t != NULL){
 2e6:	ab 81       	ldd	r26, Y+3	; 0x03
 2e8:	bc 81       	ldd	r27, Y+4	; 0x04
 2ea:	10 97       	sbiw	r26, 0x00	; 0
 2ec:	29 f0       	breq	.+10     	; 0x2f8 <test+0xc0>
		/* Not an empty queue */
		(*t)->next = *nL;
 2ee:	13 96       	adiw	r26, 0x03	; 3
 2f0:	fc 93       	st	X, r31
 2f2:	ee 93       	st	-X, r30
 2f4:	12 97       	sbiw	r26, 0x02	; 2
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <test+0xc4>
	}/*if*/
	else{
		/* It's an empty Queue */
		//(*h)->next = *nL;
		//should be this
		*h = *nL;
 2f8:	fa 83       	std	Y+2, r31	; 0x02
 2fa:	e9 83       	std	Y+1, r30	; 0x01
		*t = *nL;
 2fc:	fc 83       	std	Y+4, r31	; 0x04
 2fe:	eb 83       	std	Y+3, r30	; 0x03

	initLink(&newLink);
	newLink->e.itemCode = 7;
	newLink->e.stage = 8;
	enqueue(&head, &tail, &newLink);
	PORTB = head->e.itemCode;
 300:	a9 81       	ldd	r26, Y+1	; 0x01
 302:	ba 81       	ldd	r27, Y+2	; 0x02
 304:	8c 91       	ld	r24, X
 306:	85 b9       	out	0x05, r24	; 5
	PORTB = tail->e.stage;
 308:	eb 81       	ldd	r30, Y+3	; 0x03
 30a:	fc 81       	ldd	r31, Y+4	; 0x04
 30c:	91 81       	ldd	r25, Z+1	; 0x01
 30e:	95 b9       	out	0x05, r25	; 5

	PORTB = 0x00;
 310:	15 b8       	out	0x05, r1	; 5

	/* Tests to see if firstValue works */
	eTest = firstValue(&head);
	PORTB = eTest.itemCode;
 312:	85 b9       	out	0x05, r24	; 5
	PORTB = 0x00;
 314:	15 b8       	out	0x05, r1	; 5
 316:	fd 01       	movw	r30, r26
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	04 c0       	rjmp	.+8      	; 0x326 <test+0xee>
	numElements = 0;

	temp = *h;			/* point to the first item in the list */

	while(temp != NULL){
		numElements++;
 31e:	01 96       	adiw	r24, 0x01	; 1
		temp = temp->next;
 320:	02 80       	ldd	r0, Z+2	; 0x02
 322:	f3 81       	ldd	r31, Z+3	; 0x03
 324:	e0 2d       	mov	r30, r0

	numElements = 0;

	temp = *h;			/* point to the first item in the list */

	while(temp != NULL){
 326:	30 97       	sbiw	r30, 0x00	; 0
 328:	d1 f7       	brne	.-12     	; 0x31e <test+0xe6>
	eTest = firstValue(&head);
	PORTB = eTest.itemCode;
	PORTB = 0x00;

	/* Tests if Size works */
	PORTB = size(&head, &tail);
 32a:	85 b9       	out	0x05, r24	; 5
* RETURNS: 1:if the queue is empty, and 0:if the queue is NOT empty
*/
/* Check to see if the queue is empty */
char isEmpty(link **h){
	/* ENTER YOUR CODE HERE */
	return(*h == NULL);
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	ab 2b       	or	r26, r27
 330:	09 f4       	brne	.+2      	; 0x334 <test+0xfc>
 332:	81 e0       	ldi	r24, 0x01	; 1
	//PORTB = rtnLink->e.itemCode;
	//dequeue(&head, &rtnLink); /* remove the item at the head of the list */
	//PORTB = rtnLink->e.itemCode;
	
	/* Tests is empty */
	PORTB = isEmpty(&head);
 334:	85 b9       	out	0x05, r24	; 5

	/* Tests to see if clearQueue works*/
	clearQueue(&head, &tail);
 336:	ce 01       	movw	r24, r28
 338:	01 96       	adiw	r24, 0x01	; 1
 33a:	be 01       	movw	r22, r28
 33c:	6d 5f       	subi	r22, 0xFD	; 253
 33e:	7f 4f       	sbci	r23, 0xFF	; 255
 340:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <clearQueue>
	link 	*temp;			/* will store the link while traversing the queue */
	int 	numElements;

	numElements = 0;

	temp = *h;			/* point to the first item in the list */
 344:	29 81       	ldd	r18, Y+1	; 0x01
 346:	3a 81       	ldd	r19, Y+2	; 0x02
 348:	f9 01       	movw	r30, r18
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	04 c0       	rjmp	.+8      	; 0x358 <test+0x120>

	while(temp != NULL){
		numElements++;
 350:	01 96       	adiw	r24, 0x01	; 1
		temp = temp->next;
 352:	02 80       	ldd	r0, Z+2	; 0x02
 354:	f3 81       	ldd	r31, Z+3	; 0x03
 356:	e0 2d       	mov	r30, r0

	numElements = 0;

	temp = *h;			/* point to the first item in the list */

	while(temp != NULL){
 358:	30 97       	sbiw	r30, 0x00	; 0
 35a:	d1 f7       	brne	.-12     	; 0x350 <test+0x118>
	/* Tests is empty */
	PORTB = isEmpty(&head);

	/* Tests to see if clearQueue works*/
	clearQueue(&head, &tail);
	PORTB = size(&head, &tail);
 35c:	85 b9       	out	0x05, r24	; 5
* RETURNS: 1:if the queue is empty, and 0:if the queue is NOT empty
*/
/* Check to see if the queue is empty */
char isEmpty(link **h){
	/* ENTER YOUR CODE HERE */
	return(*h == NULL);
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	23 2b       	or	r18, r19
 362:	09 f4       	brne	.+2      	; 0x366 <test+0x12e>
 364:	81 e0       	ldi	r24, 0x01	; 1

	/* Tests to see if clearQueue works*/
	clearQueue(&head, &tail);
	PORTB = size(&head, &tail);

	PORTB = isEmpty(&head);
 366:	85 b9       	out	0x05, r24	; 5


	return(0);
}/* main */
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	26 96       	adiw	r28, 0x06	; 6
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	f8 94       	cli
 372:	de bf       	out	0x3e, r29	; 62
 374:	0f be       	out	0x3f, r0	; 63
 376:	cd bf       	out	0x3d, r28	; 61
 378:	cf 91       	pop	r28
 37a:	df 91       	pop	r29
 37c:	08 95       	ret

0000037e <mTimer>:
#include "mTimer.h"

//########################################################################
//function for timer in milliseconds
void mTimer(int count)
{
 37e:	9c 01       	movw	r18, r24
	TCCR1B|=(1<<CS10)|(1<<WGM12); //set timer control prescaling to none and mode
 380:	80 91 81 00 	lds	r24, 0x0081
 384:	89 60       	ori	r24, 0x09	; 9
 386:	80 93 81 00 	sts	0x0081, r24
	//to Clear Time on Compare, CTC.
	OCR1A=1000; // Output compare register is set to 1000D.
 38a:	88 ee       	ldi	r24, 0xE8	; 232
 38c:	93 e0       	ldi	r25, 0x03	; 3
 38e:	90 93 89 00 	sts	0x0089, r25
 392:	80 93 88 00 	sts	0x0088, r24
	TCNT1=0; // Initialize counter
 396:	10 92 85 00 	sts	0x0085, r1
 39a:	10 92 84 00 	sts	0x0084, r1
	//TIMSK1|= (0<<1);//Timer counter output compare A match is disabled.
	TIFR1|=(1<<OCF1A); //Timer counter interrupt flag is cleared and timer is started.
 39e:	b1 9a       	sbi	0x16, 1	; 22
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	04 c0       	rjmp	.+8      	; 0x3ae <mTimer+0x30>
	
	int i=0; // for counting the loop
	while(i<count){
		if((TIFR1&(0b00000010))==0b00000010){
 3a6:	b1 9b       	sbis	0x16, 1	; 22
 3a8:	fe cf       	rjmp	.-4      	; 0x3a6 <mTimer+0x28>
			TIFR1|=(1<<OCF1A); //Timer counter interrupt flag is cleared.
 3aa:	b1 9a       	sbi	0x16, 1	; 22
			i++;
 3ac:	01 96       	adiw	r24, 0x01	; 1
	TCNT1=0; // Initialize counter
	//TIMSK1|= (0<<1);//Timer counter output compare A match is disabled.
	TIFR1|=(1<<OCF1A); //Timer counter interrupt flag is cleared and timer is started.
	
	int i=0; // for counting the loop
	while(i<count){
 3ae:	82 17       	cp	r24, r18
 3b0:	93 07       	cpc	r25, r19
 3b2:	cc f3       	brlt	.-14     	; 0x3a6 <mTimer+0x28>
		if((TIFR1&(0b00000010))==0b00000010){
			TIFR1|=(1<<OCF1A); //Timer counter interrupt flag is cleared.
			i++;
		}//if
	}//while
}//mTimer
 3b4:	08 95       	ret

000003b6 <initPWM>:
#include "init.h"

void initPWM()
{
	/* Generating PWM */
   TCCR0A|=1<<WGM00|1<<WGM01;/*Set timer to fast PWM mode, update OCRA at TOP=0xFF*/
 3b6:	84 b5       	in	r24, 0x24	; 36
 3b8:	83 60       	ori	r24, 0x03	; 3
 3ba:	84 bd       	out	0x24, r24	; 36
   //TIMSK0|=0<<OCIE0A;		 /*Interrupt is disabled for TCNT0 on A Compare */
   //TIFR0|=1<<OCF0A;			 /*Reset TIFR0 and initiate counter */
   TCCR0A|=1<<COM0A1;		 /*Set output mode to non-inverted, OC0A clear on compare, set at TOP */
 3bc:	84 b5       	in	r24, 0x24	; 36
 3be:	80 68       	ori	r24, 0x80	; 128
 3c0:	84 bd       	out	0x24, r24	; 36
   TCCR0B|=1<<CS01;			 /*Set Timer pre-scale to 8    */
 3c2:	85 b5       	in	r24, 0x25	; 37
 3c4:	82 60       	ori	r24, 0x02	; 2
 3c6:	85 bd       	out	0x25, r24	; 37
   OCR0A=127;				 /*Duty Cycle approximately 50% */
 3c8:	8f e7       	ldi	r24, 0x7F	; 127
 3ca:	87 bd       	out	0x27, r24	; 39
   DDRB|=1<<DDB7;			/*Set PORTB PIN7 as output to enable OC0A to control PIN output */
 3cc:	27 9a       	sbi	0x04, 7	; 4
}
 3ce:	08 95       	ret

000003d0 <initADC>:

void initADC() 
{
	// by default, the ADC input (analog input is set to be ADC0 / PORTF0
	ADCSRA |= _BV(ADEN); // enable ADC
 3d0:	ea e7       	ldi	r30, 0x7A	; 122
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	80 81       	ld	r24, Z
 3d6:	80 68       	ori	r24, 0x80	; 128
 3d8:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADIE); // enable interrupt of ADC
 3da:	80 81       	ld	r24, Z
 3dc:	88 60       	ori	r24, 0x08	; 8
 3de:	80 83       	st	Z, r24
	ADMUX |= _BV(ADLAR) | _BV(REFS0); // set reference voltage to VCC
 3e0:	ec e7       	ldi	r30, 0x7C	; 124
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	80 66       	ori	r24, 0x60	; 96
 3e8:	80 83       	st	Z, r24
}
 3ea:	08 95       	ret

000003ec <initInterrupts>:

void initInterrupts()
{
	// config the external interrupt ======================================
	EIMSK|=1<<INT1; //enable INT1
 3ec:	e9 9a       	sbi	0x1d, 1	; 29
	EIMSK|=1<<INT2; //enable INT2
 3ee:	ea 9a       	sbi	0x1d, 2	; 29
	EIMSK|=1<<INT3; //enable INT3
 3f0:	eb 9a       	sbi	0x1d, 3	; 29
	EIMSK|=1<<INT4; //enable INT4
 3f2:	ec 9a       	sbi	0x1d, 4	; 29
	EIMSK|=1<<INT6; //enable INT6
 3f4:	ee 9a       	sbi	0x1d, 6	; 29

	EICRA |= _BV(ISC11);//falling edge INT1 for system ramp-down PB
 3f6:	e9 e6       	ldi	r30, 0x69	; 105
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	80 81       	ld	r24, Z
 3fc:	88 60       	ori	r24, 0x08	; 8
 3fe:	80 83       	st	Z, r24
	EICRA |= _BV(ISC21);//falling edge INT2 for system pause PB
 400:	80 81       	ld	r24, Z
 402:	80 62       	ori	r24, 0x20	; 32
 404:	80 83       	st	Z, r24
	EICRA |= _BV(ISC31);//falling edge INT3 for Hall effect sensor
 406:	80 81       	ld	r24, Z
 408:	80 68       	ori	r24, 0x80	; 128
 40a:	80 83       	st	Z, r24
	EICRA |= _BV(ISC41);//falling edge INT4 for input optical sensor
 40c:	80 81       	ld	r24, Z
 40e:	82 60       	ori	r24, 0x02	; 2
 410:	80 83       	st	Z, r24
	EICRA |= _BV(ISC61) | _BV(ISC60);//rising edge INT4 for pre-reflectance optical sensor
 412:	80 81       	ld	r24, Z
 414:	80 63       	ori	r24, 0x30	; 48
 416:	80 83       	st	Z, r24
}
 418:	08 95       	ret

0000041a <startDCMotor>:
#include "motors.h"

//function to start DC motor
void startDCMotor()
{
	PORTB = 0b00000010; // start the conveyor
 41a:	82 e0       	ldi	r24, 0x02	; 2
 41c:	85 b9       	out	0x05, r24	; 5
}
 41e:	08 95       	ret

00000420 <stopDCMotor>:


//function to stop DC motor
void stopDCMotor()
{
	PORTB = 0b00000000; // stop the conveyor
 420:	15 b8       	out	0x05, r1	; 5
}
 422:	08 95       	ret

00000424 <malloc>:
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	bc 01       	movw	r22, r24
 42a:	82 30       	cpi	r24, 0x02	; 2
 42c:	91 05       	cpc	r25, r1
 42e:	10 f4       	brcc	.+4      	; 0x434 <malloc+0x10>
 430:	62 e0       	ldi	r22, 0x02	; 2
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	a0 91 09 01 	lds	r26, 0x0109
 438:	b0 91 0a 01 	lds	r27, 0x010A
 43c:	ed 01       	movw	r28, r26
 43e:	e0 e0       	ldi	r30, 0x00	; 0
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	40 e0       	ldi	r20, 0x00	; 0
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	21 c0       	rjmp	.+66     	; 0x48a <malloc+0x66>
 448:	88 81       	ld	r24, Y
 44a:	99 81       	ldd	r25, Y+1	; 0x01
 44c:	86 17       	cp	r24, r22
 44e:	97 07       	cpc	r25, r23
 450:	69 f4       	brne	.+26     	; 0x46c <malloc+0x48>
 452:	8a 81       	ldd	r24, Y+2	; 0x02
 454:	9b 81       	ldd	r25, Y+3	; 0x03
 456:	30 97       	sbiw	r30, 0x00	; 0
 458:	19 f0       	breq	.+6      	; 0x460 <malloc+0x3c>
 45a:	93 83       	std	Z+3, r25	; 0x03
 45c:	82 83       	std	Z+2, r24	; 0x02
 45e:	04 c0       	rjmp	.+8      	; 0x468 <malloc+0x44>
 460:	90 93 0a 01 	sts	0x010A, r25
 464:	80 93 09 01 	sts	0x0109, r24
 468:	fe 01       	movw	r30, r28
 46a:	34 c0       	rjmp	.+104    	; 0x4d4 <malloc+0xb0>
 46c:	68 17       	cp	r22, r24
 46e:	79 07       	cpc	r23, r25
 470:	38 f4       	brcc	.+14     	; 0x480 <malloc+0x5c>
 472:	41 15       	cp	r20, r1
 474:	51 05       	cpc	r21, r1
 476:	19 f0       	breq	.+6      	; 0x47e <malloc+0x5a>
 478:	84 17       	cp	r24, r20
 47a:	95 07       	cpc	r25, r21
 47c:	08 f4       	brcc	.+2      	; 0x480 <malloc+0x5c>
 47e:	ac 01       	movw	r20, r24
 480:	fe 01       	movw	r30, r28
 482:	8a 81       	ldd	r24, Y+2	; 0x02
 484:	9b 81       	ldd	r25, Y+3	; 0x03
 486:	9c 01       	movw	r18, r24
 488:	e9 01       	movw	r28, r18
 48a:	20 97       	sbiw	r28, 0x00	; 0
 48c:	e9 f6       	brne	.-70     	; 0x448 <malloc+0x24>
 48e:	41 15       	cp	r20, r1
 490:	51 05       	cpc	r21, r1
 492:	a9 f1       	breq	.+106    	; 0x4fe <malloc+0xda>
 494:	ca 01       	movw	r24, r20
 496:	86 1b       	sub	r24, r22
 498:	97 0b       	sbc	r25, r23
 49a:	04 97       	sbiw	r24, 0x04	; 4
 49c:	08 f4       	brcc	.+2      	; 0x4a0 <malloc+0x7c>
 49e:	ba 01       	movw	r22, r20
 4a0:	e0 e0       	ldi	r30, 0x00	; 0
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	2a c0       	rjmp	.+84     	; 0x4fa <malloc+0xd6>
 4a6:	8d 91       	ld	r24, X+
 4a8:	9c 91       	ld	r25, X
 4aa:	11 97       	sbiw	r26, 0x01	; 1
 4ac:	84 17       	cp	r24, r20
 4ae:	95 07       	cpc	r25, r21
 4b0:	f9 f4       	brne	.+62     	; 0x4f0 <malloc+0xcc>
 4b2:	64 17       	cp	r22, r20
 4b4:	75 07       	cpc	r23, r21
 4b6:	81 f4       	brne	.+32     	; 0x4d8 <malloc+0xb4>
 4b8:	12 96       	adiw	r26, 0x02	; 2
 4ba:	8d 91       	ld	r24, X+
 4bc:	9c 91       	ld	r25, X
 4be:	13 97       	sbiw	r26, 0x03	; 3
 4c0:	30 97       	sbiw	r30, 0x00	; 0
 4c2:	19 f0       	breq	.+6      	; 0x4ca <malloc+0xa6>
 4c4:	93 83       	std	Z+3, r25	; 0x03
 4c6:	82 83       	std	Z+2, r24	; 0x02
 4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <malloc+0xae>
 4ca:	90 93 0a 01 	sts	0x010A, r25
 4ce:	80 93 09 01 	sts	0x0109, r24
 4d2:	fd 01       	movw	r30, r26
 4d4:	32 96       	adiw	r30, 0x02	; 2
 4d6:	4f c0       	rjmp	.+158    	; 0x576 <malloc+0x152>
 4d8:	ca 01       	movw	r24, r20
 4da:	86 1b       	sub	r24, r22
 4dc:	97 0b       	sbc	r25, r23
 4de:	fd 01       	movw	r30, r26
 4e0:	e8 0f       	add	r30, r24
 4e2:	f9 1f       	adc	r31, r25
 4e4:	61 93       	st	Z+, r22
 4e6:	71 93       	st	Z+, r23
 4e8:	02 97       	sbiw	r24, 0x02	; 2
 4ea:	8d 93       	st	X+, r24
 4ec:	9c 93       	st	X, r25
 4ee:	43 c0       	rjmp	.+134    	; 0x576 <malloc+0x152>
 4f0:	fd 01       	movw	r30, r26
 4f2:	82 81       	ldd	r24, Z+2	; 0x02
 4f4:	93 81       	ldd	r25, Z+3	; 0x03
 4f6:	9c 01       	movw	r18, r24
 4f8:	d9 01       	movw	r26, r18
 4fa:	10 97       	sbiw	r26, 0x00	; 0
 4fc:	a1 f6       	brne	.-88     	; 0x4a6 <malloc+0x82>
 4fe:	80 91 07 01 	lds	r24, 0x0107
 502:	90 91 08 01 	lds	r25, 0x0108
 506:	89 2b       	or	r24, r25
 508:	41 f4       	brne	.+16     	; 0x51a <malloc+0xf6>
 50a:	80 91 02 01 	lds	r24, 0x0102
 50e:	90 91 03 01 	lds	r25, 0x0103
 512:	90 93 08 01 	sts	0x0108, r25
 516:	80 93 07 01 	sts	0x0107, r24
 51a:	40 91 04 01 	lds	r20, 0x0104
 51e:	50 91 05 01 	lds	r21, 0x0105
 522:	41 15       	cp	r20, r1
 524:	51 05       	cpc	r21, r1
 526:	41 f4       	brne	.+16     	; 0x538 <malloc+0x114>
 528:	4d b7       	in	r20, 0x3d	; 61
 52a:	5e b7       	in	r21, 0x3e	; 62
 52c:	80 91 00 01 	lds	r24, 0x0100
 530:	90 91 01 01 	lds	r25, 0x0101
 534:	48 1b       	sub	r20, r24
 536:	59 0b       	sbc	r21, r25
 538:	20 91 07 01 	lds	r18, 0x0107
 53c:	30 91 08 01 	lds	r19, 0x0108
 540:	24 17       	cp	r18, r20
 542:	35 07       	cpc	r19, r21
 544:	b0 f4       	brcc	.+44     	; 0x572 <malloc+0x14e>
 546:	ca 01       	movw	r24, r20
 548:	82 1b       	sub	r24, r18
 54a:	93 0b       	sbc	r25, r19
 54c:	86 17       	cp	r24, r22
 54e:	97 07       	cpc	r25, r23
 550:	80 f0       	brcs	.+32     	; 0x572 <malloc+0x14e>
 552:	ab 01       	movw	r20, r22
 554:	4e 5f       	subi	r20, 0xFE	; 254
 556:	5f 4f       	sbci	r21, 0xFF	; 255
 558:	84 17       	cp	r24, r20
 55a:	95 07       	cpc	r25, r21
 55c:	50 f0       	brcs	.+20     	; 0x572 <malloc+0x14e>
 55e:	42 0f       	add	r20, r18
 560:	53 1f       	adc	r21, r19
 562:	50 93 08 01 	sts	0x0108, r21
 566:	40 93 07 01 	sts	0x0107, r20
 56a:	f9 01       	movw	r30, r18
 56c:	61 93       	st	Z+, r22
 56e:	71 93       	st	Z+, r23
 570:	02 c0       	rjmp	.+4      	; 0x576 <malloc+0x152>
 572:	e0 e0       	ldi	r30, 0x00	; 0
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	cf 01       	movw	r24, r30
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	08 95       	ret

0000057e <free>:
 57e:	cf 93       	push	r28
 580:	df 93       	push	r29
 582:	00 97       	sbiw	r24, 0x00	; 0
 584:	09 f4       	brne	.+2      	; 0x588 <free+0xa>
 586:	50 c0       	rjmp	.+160    	; 0x628 <free+0xaa>
 588:	ec 01       	movw	r28, r24
 58a:	22 97       	sbiw	r28, 0x02	; 2
 58c:	1b 82       	std	Y+3, r1	; 0x03
 58e:	1a 82       	std	Y+2, r1	; 0x02
 590:	a0 91 09 01 	lds	r26, 0x0109
 594:	b0 91 0a 01 	lds	r27, 0x010A
 598:	10 97       	sbiw	r26, 0x00	; 0
 59a:	09 f1       	breq	.+66     	; 0x5de <free+0x60>
 59c:	40 e0       	ldi	r20, 0x00	; 0
 59e:	50 e0       	ldi	r21, 0x00	; 0
 5a0:	ac 17       	cp	r26, r28
 5a2:	bd 07       	cpc	r27, r29
 5a4:	08 f1       	brcs	.+66     	; 0x5e8 <free+0x6a>
 5a6:	bb 83       	std	Y+3, r27	; 0x03
 5a8:	aa 83       	std	Y+2, r26	; 0x02
 5aa:	fe 01       	movw	r30, r28
 5ac:	21 91       	ld	r18, Z+
 5ae:	31 91       	ld	r19, Z+
 5b0:	e2 0f       	add	r30, r18
 5b2:	f3 1f       	adc	r31, r19
 5b4:	ae 17       	cp	r26, r30
 5b6:	bf 07       	cpc	r27, r31
 5b8:	79 f4       	brne	.+30     	; 0x5d8 <free+0x5a>
 5ba:	8d 91       	ld	r24, X+
 5bc:	9c 91       	ld	r25, X
 5be:	11 97       	sbiw	r26, 0x01	; 1
 5c0:	28 0f       	add	r18, r24
 5c2:	39 1f       	adc	r19, r25
 5c4:	2e 5f       	subi	r18, 0xFE	; 254
 5c6:	3f 4f       	sbci	r19, 0xFF	; 255
 5c8:	39 83       	std	Y+1, r19	; 0x01
 5ca:	28 83       	st	Y, r18
 5cc:	12 96       	adiw	r26, 0x02	; 2
 5ce:	8d 91       	ld	r24, X+
 5d0:	9c 91       	ld	r25, X
 5d2:	13 97       	sbiw	r26, 0x03	; 3
 5d4:	9b 83       	std	Y+3, r25	; 0x03
 5d6:	8a 83       	std	Y+2, r24	; 0x02
 5d8:	41 15       	cp	r20, r1
 5da:	51 05       	cpc	r21, r1
 5dc:	71 f4       	brne	.+28     	; 0x5fa <free+0x7c>
 5de:	d0 93 0a 01 	sts	0x010A, r29
 5e2:	c0 93 09 01 	sts	0x0109, r28
 5e6:	20 c0       	rjmp	.+64     	; 0x628 <free+0xaa>
 5e8:	12 96       	adiw	r26, 0x02	; 2
 5ea:	8d 91       	ld	r24, X+
 5ec:	9c 91       	ld	r25, X
 5ee:	13 97       	sbiw	r26, 0x03	; 3
 5f0:	ad 01       	movw	r20, r26
 5f2:	00 97       	sbiw	r24, 0x00	; 0
 5f4:	11 f0       	breq	.+4      	; 0x5fa <free+0x7c>
 5f6:	dc 01       	movw	r26, r24
 5f8:	d3 cf       	rjmp	.-90     	; 0x5a0 <free+0x22>
 5fa:	fa 01       	movw	r30, r20
 5fc:	d3 83       	std	Z+3, r29	; 0x03
 5fe:	c2 83       	std	Z+2, r28	; 0x02
 600:	21 91       	ld	r18, Z+
 602:	31 91       	ld	r19, Z+
 604:	e2 0f       	add	r30, r18
 606:	f3 1f       	adc	r31, r19
 608:	ce 17       	cp	r28, r30
 60a:	df 07       	cpc	r29, r31
 60c:	69 f4       	brne	.+26     	; 0x628 <free+0xaa>
 60e:	88 81       	ld	r24, Y
 610:	99 81       	ldd	r25, Y+1	; 0x01
 612:	28 0f       	add	r18, r24
 614:	39 1f       	adc	r19, r25
 616:	2e 5f       	subi	r18, 0xFE	; 254
 618:	3f 4f       	sbci	r19, 0xFF	; 255
 61a:	fa 01       	movw	r30, r20
 61c:	31 83       	std	Z+1, r19	; 0x01
 61e:	20 83       	st	Z, r18
 620:	8a 81       	ldd	r24, Y+2	; 0x02
 622:	9b 81       	ldd	r25, Y+3	; 0x03
 624:	93 83       	std	Z+3, r25	; 0x03
 626:	82 83       	std	Z+2, r24	; 0x02
 628:	df 91       	pop	r29
 62a:	cf 91       	pop	r28
 62c:	08 95       	ret

0000062e <_exit>:
 62e:	f8 94       	cli

00000630 <__stop_program>:
 630:	ff cf       	rjmp	.-2      	; 0x630 <__stop_program>
